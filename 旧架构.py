#!
# -*- coding:UTF-8 -*-

import random
import sys

# 诗集
赤壁 = {
    0: "赤壁 唐 杜牧",
    1: "折戟沉沙铁未销",
    2: "自将磨洗认前朝",
    3: "东风不与周郎便",
    4: "铜雀春深锁二乔"
}
鹊桥仙 = {
    0: "鹊桥仙 北宋 秦观",
    1: "纤云弄巧，飞星传恨",
    2: "银汉迢迢暗度",
    3: "金风玉露一相逢",
    4: "便胜却人间无数",
    5: "柔情似水，佳期如梦",
    6: "忍顾鹊桥归路",
    7: "两情若是久长时",
    8: "又岂在朝朝暮暮",
}
琵琶行 = {
    0: "琵琶行 唐 白居易",
    1: "浔阳江头夜送客",
    2: "枫叶荻花秋瑟瑟",
    3: "主人下马客在船",
    4: "举酒欲饮无管弦",
    5: "醉不成欢惨将别",
    6: "别时茫茫江浸月",
    7: "忽闻水上琵琶声",
    8: "主人忘归客不发",
    9: "寻声暗问弹者谁",
    10: "琵琶声停欲语迟",
    11: "移船相近邀相见",
    12: "添酒回灯重开宴",
    13: "千呼万唤始出来",
    14: "犹抱琵琶半遮面",
    15: "转轴拨弦三两声",
    16: "未成曲调先有情",
    17: "弦弦掩抑声声思",
    18: "似诉平生不得志",
    19: "低眉信手续续弹",
    20: "说尽心中无限事",
    21: "轻拢慢捻抹复挑",
    22: "初为《霓裳》后《六幺》",
    23: "大弦嘈嘈如急雨",
    24: "小弦切切如私语",
    25: "嘈嘈切切错杂弹",
    26: "大珠小珠落玉盘",
    27: "间关莺语花底滑",
    28: "幽咽泉流冰下难",
    29: "冰泉冷涩弦凝绝",
    30: "凝绝不通声暂歇",
    31: "别有幽愁暗恨生",
    32: "此时无声胜有声",
    33: "银瓶乍破水浆迸",
    34: "铁骑突出刀枪鸣",
    35: "曲终收拨当心画",
    36: "四弦一声如裂帛",
    37: "东船西舫悄无言",
    38: "唯见江心秋月白",
    39: "沉吟放拨插弦中",
    40: "整顿衣裳起敛容",
    41: "自言本是京城女",
    42: "家在虾蟆陵下住",
    43: "十三学得琵琶成",
    44: "名属教坊第一部",
    45: "曲罢曾教善才服",
    46: "妆成每被秋娘妒",
    47: "五陵年少争缠头",
    48: "一曲红绡不知数",
    49: "钿头云篦击节碎",
    50: "血色罗裙翻酒污",
    51: "今年欢笑复明年",
    52: "秋月春风等闲度",
    53: "弟走从军阿姨死",
    54: "暮去朝来颜色故",
    55: "门前冷落鞍马稀",
    56: "老大嫁作商人妇",
    57: "商人重利轻别离",
    58: "前月浮梁买茶去",
    59: "去来江口守空船",
    60: "绕船月明江水寒",
    61: "夜深忽梦少年事",
    62: "梦啼妆泪红阑干",
    63: "我闻琵琶已叹息",
    64: "又闻此语重唧唧",
    65: "同是天涯沦落人",
    66: "相逢何必曾相识",
    67: "我从去年辞帝京",
    68: "谪居卧病浔阳城",
    69: "浔阳地僻无音乐",
    70: "终岁不闻丝竹声",
    71: "住近湓江地低湿",
    72: "黄芦苦竹绕宅生",
    73: "其间旦暮闻何物",
    74: "杜鹃啼血猿哀鸣",
    75: "春江花朝秋月夜",
    76: "往往取酒还独倾",
    77: "岂无山歌与村笛",
    78: "呕哑嘲哳难为听",
    79: "今夜闻君琵琶语",
    80: "如听仙乐耳暂明",
    81: "莫辞更坐弹一曲",
    82: "为君翻作《琵琶行》",
    83: "感我此言良久立",
    84: "却坐促弦弦转急",
    85: "凄凄不似向前声",
    86: "满座重闻皆掩泣",
    87: "座中泣下谁最多",
    88: "江州司马青衫湿",
}
将进酒 = {
    0: "将进酒 唐 李白",
    1: "君不见黄河之水天上来",
    2: "奔流到海不复回",
    3: "君不见高堂明镜悲白发",
    4: "朝如青丝暮成雪",
    5: "人生得意须尽欢",
    6: "莫使金樽空对月",
    7: "天生我材必有用",
    8: "千金散尽还复来",
    9: "烹羊宰牛且为乐",
    10: "会须一饮三百杯",
    11: "岑夫子，丹丘生",
    12: "将进酒，杯莫停",
    13: "与君歌一曲",
    14: "请君为我倾耳听",
    15: "钟鼓馔玉不足贵",
    16: "但愿长醉不复醒",
    17: "古来圣贤皆寂寞",
    18: "惟有饮者留其名",
    19: "陈王昔时宴平乐",
    20: "斗酒十千恣欢谑",
    21: "主人何为言少钱",
    22: "径须沽取对君酌",
    23: "五花马、千金裘，呼儿将出换美酒",
    24: "与尔同销万古愁",
}
国殇 = {
    0: "九歌 国殇 战国 屈原",
    1: "操吴戈兮被犀甲",
    2: "车错毂兮短兵接",
    3: "旌蔽日兮敌若云",
    4: "矢交坠兮士争先",
    5: "凌余阵兮躐余行",
    6: "左骖殪兮右刃伤",
    7: "霾两轮兮絷四马",
    8: "援玉枹兮击鸣鼓",
    9: "天时坠兮威灵怒",
    10: "严杀尽兮弃原野",
    11: "出不入兮往不反",
    12: "平原忽兮路超远",
    13: "带长剑兮挟秦弓",
    14: "首身离兮心不惩",
    15: "诚既勇兮又以武",
    16: "终刚强兮不可凌",
    17: "身既死兮神以灵",
    18: "子魂魄兮为鬼雄",
}
诗集 = {0: 赤壁, 1: 鹊桥仙, 2: 琵琶行, 3: 将进酒, 4: 国殇}
成绩 = {}  # 成绩初始化,T/F字符串
已抽取 = []  # 已抽取诗句初始化,已抽取的诗句键
错题集 = []  # 错误的诗句键
错误的诗句 = []

def main():  # 主函数

    print("1/开始测试,")
    选择 = input("选择:")

    def rd():  # 抽取函数
        global 诗集  # 导入诗集
        诗集长度 = len(诗集)
        随机诗键 = random.randint(1, 诗集长度)  # 随机抽取的诗键
        # print(随机诗键)  # test
        try:
            随机诗长度 = len(诗集[随机诗键])  # BUG已修复
        except KeyError:
            rd()
        随机诗句键 = random.randint(1, 随机诗长度)  # 随机抽取的诗句键
        # print(type(rdshijvnum))#test
        try:
            随机诗句 = (诗集[随机诗键])[随机诗句键]  # 随机抽取的诗句
        # print(rdshijv)#test
        except KeyError:
            rd()

        def sy():  # 索引
            nonlocal 随机诗句  # 导入抽取到的诗句

            def pc1():  # 加入已抽取的诗句排除字典
                global 已抽取  # 导入排除字典
                nonlocal 随机诗句键  # 导入随机抽取的诗句键
                nonlocal 随机诗键  # 导入抽取到的诗句
                已抽位置 = [随机诗键, 随机诗句键]
                if (已抽位置 in 已抽取) == True:
                    rd()
                已抽取.append(已抽位置)
                # 已抽取[len(已抽取)]=已抽位置#加入字典
                # print(已抽取)

            pc1()

            def ck():  # 成绩计算
                global 成绩
                # strls = str(ls)旧版
                成绩[len(成绩)] = str(历史)  # 加入排除
                # jilu.append(strls)旧版
                print(成绩)

            if (随机诗句键 % 2) == 1:
                xyj = input("在{} 中 {} 的下一句：".format((诗集[随机诗键])[0], 随机诗句))
                历史 = xyj == (诗集[随机诗键])[随机诗句键 + 1]
                ck()
            elif (随机诗句键 % 2) == 0:
                syj = input("在{} 中 {} 的上一句：".format((诗集[随机诗键])[0], 随机诗句))
                历史 = syj == (诗集[随机诗键])[随机诗句键 - 1]
                ck()

        sy()
        global 错题集
        global 错误的诗句
        js = input("1/再来一题,2/重置成绩,重新开始,3/查看目前成绩,错误归纳,4/查看已抽取的诗句,6/结束测试并返回主页面,任意按键退出程序:")
        if js == "1":
            rd()
        elif js == "2":

            成绩.clear()
            已抽取.clear()
            错题集.clear()
            错误的诗句.clear()
            print("WARNING:{}!".format("已重置"))
            main()
        elif js == "3":#成绩
            print(成绩)
            f = 0
            错误的诗句str集 = []
            for ii in range(0, len(成绩)):
                if 成绩[ii] == "False":
                    f += 1
                    错题集.append(ii)
                else:
                    pass
            z = len(成绩)
            t = z - f
            print("正确{}个，错误{}个，正确率{}%.".format(t, f, t / z * 100))
            for 提取错误 in 错题集:
                错误的诗句.append(已抽取[提取错误])
            for 提取 in range(0, len(错误的诗句)):
                错误诗集位置 = (错误的诗句[提取])[0]  # int
                错误诗句位置 = (错误的诗句[提取])[1]  # int
                错误诗 = 诗集[错误诗集位置]  # dist
                错误诗句 = 错误诗[错误诗句位置]  # str
                if (错误诗句位置 % 2) == 1:
                    下一句 = 错误诗[错误诗句位置 + 1]  # str
                    错误的诗句str集 = 错误的诗句str集 + [错误诗句+"，"+下一句]
                elif (错误诗句位置 % 2) == 0:
                    上一句 = 错误诗[错误诗句位置 - 1]  # str
                    错误的诗句str集 =[错误诗句+"，"+上一句]+ 错误的诗句str集
            print("错误的诗句:", 错误的诗句str集) 
            main()
        elif js == "4": # 已抽取的诗句
            print(已抽取)
            main()
        else:
            sys.exit(0)

    if 选择 == "1":
        print("开始!")
        rd()
    else:
        main()

if __name__ == "__main__":  # 入口
    main()
